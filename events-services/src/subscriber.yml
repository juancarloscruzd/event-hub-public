Description: >

    This template deploys the EventServices Subscriber Lambda function, responsible enroll Subscribers to event types

    Last Modified: 2018
    Author: Kiko Gatto 

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

Resources:
    SubscriberLambdaRole: 
        Type: AWS::IAM::Role
        Properties: 
            AssumeRolePolicyDocument: 
                Version: '2012-10-17'
                Statement: 
                - Effect: Allow
                  Principal: 
                      Service: lambda.amazonaws.com
                  Action: 
                       - sts:AssumeRole
            Path: '/'
            Policies: 
            - PolicyName: logs
              PolicyDocument: 
                  Statement: 
                  - Effect: Allow
                    Action: 
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    Resource: arn:aws:logs:*:*:*
            - PolicyName: sns
              PolicyDocument: 
                  Statement: 
                  - Effect: Allow
                    Action:
                    - sns:CreateTopic
                    - sns:Unsubscribe
                    - sns:Subscribe
                    Resource: "*"
            - PolicyName: sqs
              PolicyDocument: 
                  Statement: 
                  - Effect: Allow
                    Action: 
                    - sqs:ListQueues
                    - sqs:GetQueueAttributes
                    - sqs:CreateQueue
                    - sqs:SetQueueAttributes
                    Resource: "*"

    SubscriberLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code: 
                S3Bucket: !Sub
                  - ${StackName}-events 
                  - { StackName: !Ref EnvironmentName }
                S3Key: "subscriber.zip"

            Handler: events-services/src/subscriber.handler
            MemorySize: 128
            Role: !Sub ${SubscriberLambdaRole.Arn}
            Runtime: nodejs6.10
            Timeout: 60

    SubscriberRestApi:
        Type: AWS::ApiGateway::RestApi
        Properties:
            Name: SubscriberRestApi

    SubscribeResource: 
        Type: "AWS::ApiGateway::Resource"
        Properties: 
            RestApiId: 
                Ref: "SubscriberRestApi"
            ParentId: 
                Fn::GetAtt: 
                    - "SubscriberRestApi"
                    - "RootResourceId"
            PathPart: "subscribe"

    ProxyResourceANY:
        Type: AWS::ApiGateway::Method
        Properties:
            RestApiId: !Ref SubscriberRestApi
            ResourceId: !Ref SubscribeResource
            HttpMethod: POST      
            AuthorizationType: NONE
            Integration:
                Type: AWS
                IntegrationHttpMethod: POST
                Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SubscriberLambda.Arn}/invocations


    PermissionForAPIInvokeLambda: 
        Type: "AWS::Lambda::Permission"
        Properties: 
            FunctionName: 
                Ref: "SubscriberLambda"
            Action: "lambda:InvokeFunction"
            Principal: "apigateway.amazonaws.com"


