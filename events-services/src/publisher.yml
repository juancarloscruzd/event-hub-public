AWSTemplateFormatVersion: 2010-09-09
Description: >
  This template deploys the EventsServices Publish pipeline, responsible for receiving the events and making them available for dispatching to subscribers.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

Resources:
  DeadLetterQueue:
    Type: "AWS::SQS::Queue"

  PublishedQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !Sub "${DeadLetterQueue.Arn}"
        maxReceiveCount: 10

  ReceivedTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        - Endpoint: !GetAtt
            - PublishedQueue
            - Arn
          Protocol: sqs

  PublishedQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Id: PublishedQueuePolicy
        Version: "2012-10-17"
        Statement:
          - Sid: Allow-ReceivedTopic-SendMessage
            Effect: Allow
            Principal: "*"
            Action:
              - sqs:SendMessage
            Resource: !GetAtt
              - PublishedQueue
              - Arn
      Queues:
        - !Ref PublishedQueue

  PublisherLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: sns
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: "*"

  PublisherLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub
          - ${StackName}-events
          - { StackName: !Ref EnvironmentName }
        S3Key: "events.zip"

      Handler: events-services/src/publisher.handler
      MemorySize: 128
      Role: !Sub ${PublisherLambdaRole.Arn}
      Runtime: nodejs8.10
      Timeout: 60
      Environment:
        Variables:
          RECEIVED_EVENTS_ARN: !Ref ReceivedTopic

  PublishApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: PublishApi

  PublishResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "PublishApi"
      ParentId:
        Fn::GetAtt:
          - "PublishApi"
          - "RootResourceId"
      PathPart: "publish"

  PublishMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: "PublishEvents"
      RestApiId: !Ref PublishApi
      ResourceId: !Ref PublishResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 500
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublisherLambda.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 500
        PassthroughBehavior: WHEN_NO_MATCH

  PublishDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn: "PublishMethod"
    Properties:
      RestApiId: !Ref PublishApi
      Description: "Publish api deployment"

  PublishStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      CacheClusterEnabled: false
      DeploymentId: !Ref PublishDeployment
      Description: "Deploys the publish API"
      RestApiId: !Ref PublishApi
      StageName: "beta"

  PermissionForAPIInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Ref: "PublisherLambda"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"

Outputs:
  PublishedQueueURL:
    Description: the URL for the Published events Queue
    Value:
      Ref: "PublishedQueue"
  PublishedQueueARN:
    Description: the ARN for the Published events Queue
    Value:
      Fn::GetAtt:
        - "PublishedQueue"
        - "Arn"
